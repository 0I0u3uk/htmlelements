{"name":"Htmlelements","body":"Html Elements framework\r\n=======================\r\n\r\nThis framework is designed to provide easy-to-use way of interaction with web-page elements in your tests. It may be \r\nconsidered as an extension of WebDriver Page Object.<br/>\r\nWith the help of Html Elements framework you can group web-page elements into blocks, encapsulate logic of interaction with them \r\nand then easily use created blocks in page objects. It also provides a set of helpful matchers to use with web-page elements \r\nand blocks. See <a href=\"https://oss.sonatype.org/service/local/repositories/releases/archive/ru/yandex/qatools/htmlelements/htmlelements/1.8/htmlelements-1.8-javadoc.jar/!/index.html\">JavaDocs</a> \r\nfor more details.\r\n\r\nInclude Html Elements in your project\r\n-------------------------------------\r\nMaven dependencies for Html Elements core:\r\n\r\n    <dependency>\r\n        <groupId>ru.yandex.qatools.htmlelements</groupId>\r\n        <artifactId>htmlelements-java</artifactId>\r\n        <version>1.8</version>\r\n    </dependency>\r\n\r\nAnd for Html Elements matchers:\r\n\r\n    <dependency>\r\n        <groupId>ru.yandex.qatools.htmlelements</groupId>\r\n        <artifactId>htmlelements-matchers</artifactId>\r\n        <version>1.8</version>\r\n    </dependency>\r\n\r\nCreate blocks of elements\r\n-------------------------\r\nFor example, let's create a block for the search form on the page http://www.yandex.com:\r\n\r\n    import org.openqa.selenium.support.FindBy;\r\n    import ru.yandex.qatools.htmlelements.annotations.Block;\r\n    import ru.yandex.qatools.htmlelements.element.Button;\r\n    import ru.yandex.qatools.htmlelements.element.HtmlElement;\r\n    import ru.yandex.qatools.htmlelements.element.TextInput;\r\n\r\n    @Name(\"Search form\")\r\n    @Block(@FindBy(xpath = \"//form\"))\r\n    public class SearchArrow extends HtmlElement {\r\n        @Name(\"Search request input\")\r\n        @FindBy(id = \"searchInput\")\r\n        private TextInput requestInput;\r\n\r\n        @Name(\"Search button\")\r\n        @FindBy(className = \"b-form-button__input\")\r\n        private Button searchButton;\r\n\r\n        public void search(String request) {\r\n            requestInput.sendKeys(request);\r\n            searchButton.click();\r\n        }\r\n    }\r\n\r\nConstruct page object using created blocks\r\n------------------------------------------\r\nYou can easily use created blocks in page objects:\r\n\r\n    import org.openqa.selenium.WebDriver;\r\n    import ru.yandex.qatools.htmlelements.annotations.Name;\r\n    import ru.yandex.qatools.htmlelements.loader.HtmlElementLoader;\r\n    import ru.yandex.qatools.htmlelements.testelements.SearchArrow;\r\n\r\n    public class SearchPage {\r\n        private SearchArrow searchArrow;\r\n        // Other blocks and elements here\r\n\r\n        public SearchPage(WebDriver driver) {\r\n            HtmlElementLoader.populatePageObject(this, driver);\r\n        }\r\n\r\n        public void search(String request) {\r\n            searchArrow.search(request);\r\n        }\r\n\r\n        // Other methods here\r\n    }\r\n\r\nUse page objects in your tests\r\n------------------------------\r\nCreated page objects can be used in your tests. That makes tests more comprehensive and easy to write.\r\n\r\n    import org.junit.Before;\r\n    import org.junit.Test;\r\n    import org.openqa.selenium.WebDriver;\r\n    import ru.yandex.qatools.htmlelements.testpages.SearchPage;\r\n        \r\n    public class SampleTest {\r\n        private WebDriver driver = new FirefoxDriver();\r\n        private SearchPage searchPage = new SearchPage(driver);\r\n    \r\n        @Before\r\n        public void loadPage() {\r\n            driver.get(\"http://www.yandex.com\");\r\n        }\r\n    \r\n        @Test\r\n        public void sampleTest() {\r\n            searchPage.search(\"yandex\");\r\n            // Some assertion here\r\n        }\r\n\r\n        @After\r\n        public void closeDriver() {\r\n            driver.quit();\r\n        }\r\n    }","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Html Elements is a Java framework providing easy-to-use way of interaction with web-page elements in web-page tests."}